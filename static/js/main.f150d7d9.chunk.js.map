{"version":3,"sources":["component/AddTask.js","component/EditTask.js","component/ToDo.js","component/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["AddTask","modal","toggle","save","useState","ID","Name","Deadline","IsCompleted","formValue","setFormValue","handleChange","event","target","name","value","prevState","Modal","isOpen","ModalHeader","ModalBody","classID","type","className","onChange","ModalFooter","Button","color","onClick","taskObj","EditTask","updateTask","e","preventDefault","tempObj","ToDo","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","obj","ToDoList","taskList","setTaskList","useEffect","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","push","App","TodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f150d7d9.chunk.js","sourcesContent":["import {Button, Modal, ModalHeader, ModalBody,ModalFooter} from 'reactstrap';\nimport React, { useState } from 'react';\n\nconst AddTask = ({modal, toggle, save}) => {\n    const [formValue, setFormValue] = useState({\n        ID: \"\",\n        Name: \"\",\n        Deadline: \"\",\n        IsCompleted:\"\",\n      });\n    \n      const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormValue((prevState) => {\n          return {\n            ...prevState,\n            [name]: value,\n          };\n        });\n      };\n    \n      const { ID, Name, Deadline, IsCompleted } = formValue;\n      const handleSave = () =>{\n        let taskObj= {}\n        taskObj[\"ID\"] = ID\n        taskObj[\"Name\"]= Name\n        taskObj[\"IsCompleted\"] = IsCompleted\n        taskObj[\"Deadline\"]= Deadline\n        save (taskObj)\n    }  \n    \n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\n            <ModalBody>\n                    <div classID=\"form-group\">\n                        <label>ID</label>\n                        <input type=\"text\" className=\"form-control\"  value={ID} onChange= {handleChange} name=\"ID\"/>\n                    </div>\n                    <div className = \"form-group\">\n                        <label>Name</label>\n                        <input type=\"text\" className = \"form-control\" value = {Name} onChange = {handleChange} name = \"Name\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Deadline</label>\n                        <input type=\"date\" className=\"form-control\"  value={Deadline} onChange= {handleChange} name=\"Deadline\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>State</label>\n                        <input type=\"text\" className = \"form-control\" value = {IsCompleted} onChange = {handleChange} name = \"IsCompleted\"/>\n                \n                    </div>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n            </ModalFooter>\n      </Modal>\n\n\n    );\n\n    \n};\n\nexport default AddTask;\n","import React, { useState} from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditTask = ({modal, toggle, updateTask, taskObj}) => {\n    //const [taskName, setTaskName] = useState('');\n    //const [taskIsCompleted, setTaskIsCompleted] = useState('');\n    //const [taskDeadline, setTaskDeadline] = useState('');\n    const [formValue, setFormValue] = useState({\n        Name: \"\",\n        Deadline: \"\",\n        IsCompleted:\"\",\n      });\n    \n      const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormValue((prevState) => {\n          return {\n            ...prevState,\n            [name]: value,\n          };\n        });\n      };\n    \n      const {  Name, Deadline, IsCompleted } = formValue;\n    /*useReducer(() => {\n        setTaskName (taskObj.Name)\n        setTaskIsCompleted(taskObj.isCompleted)\n        setTaskDeadline(taskObj.Deadline)\n    }, []);*/\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['Name'] = Name\n        tempObj['IsCompleted'] = IsCompleted\n        tempObj['Deadline'] = Deadline\n        updateTask(tempObj)\n    }\n\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\n            <ModalBody>\n                    <div className = \"form-group\">\n                        <label>Name</label>\n                        <input type=\"text\" className = \"form-control\" value = {Name} onChange = {handleChange} name = \"Name\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Deadline</label>\n                        <input type=\"date\" className=\"form-control\"  value={Deadline} onChange= {handleChange} name=\"Deadline\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>State</label>\n                        <input type=\"text\" className = \"form-control\" value = {IsCompleted} onChange = {handleChange} name = \"IsCompleted\"/>\n                \n                    </div>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n            </ModalFooter>\n      </Modal>\n    );\n};\n\nexport default EditTask;","import React, { useState } from \"react\";\nimport EditTask from './EditTask';\n//import AddTask from \"./AddTask\";\n\nconst ToDo= ({ taskObj, index, deleteTask, updateListArray }) => {\n    const [modal, setModal] = useState(false);\n    const colors = [\n        {\n            primaryColor : \"#5D93E1\",\n            secondaryColor : \"#ECF3FC\"\n        },\n        {\n            primaryColor : \"#F9D288\",\n            secondaryColor : \"#FEFAF1\"\n        },\n        {\n            primaryColor : \"#5DC250\",\n            secondaryColor : \"#F2FAF1\"\n        },\n        {\n            primaryColor : \"#F48687\",\n            secondaryColor : \"#FDF1F1\"\n        },\n        {\n            primaryColor : \"#B964F7\",\n            secondaryColor : \"#F3F0FD\"\n        }\n    ]\n    const toggle =() =>{\n        setModal (!modal);\n    }\n    const updateTask = (obj) =>{\n        updateListArray(obj, index)\n    }\n    const handleDelete = () => {\n        deleteTask(index)\n    }\n\n    return(\n        <div class = \"card-wrapper mr-5\" >\n        <div class = \"card-top\" style={{\"background-color\": colors[index%5].primaryColor}}></div>\n        <div class = \"task-holder\">\n            <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"10px\"}}>{taskObj.ID}</span>\n            <p className = \"mt-3\">Name: {taskObj.Name}</p>\n            <p className = \"mt-3\">Deadline: {taskObj.Deadline}</p>\n            <p className = \"mt-3\">State: {taskObj.IsCompleted}</p>\n\n            <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\n                <i class = \"far fa-edit mr-3\" style={{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\n                <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\n            </div>\n        </div> \n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\n        </div>\n    );\n};\n\nexport default ToDo;\n","import React, { useEffect, useState } from \"react\";\nimport AddTask from \"./AddTask\";\nimport ToDo from \"./ToDo\";\n\nconst ToDoList = () =>{\n    const [modal, setModal]= useState (false);\n    const [taskList, setTaskList] = useState ([]);\n    useEffect(() => {\n        let arr= localStorage.getItem(\"taskList\")\n        if (arr) {\n            let obj= JSON.parse(arr)\n            setTaskList(obj)\n        } \n    }, [])\n\n    const deleteTask = (index) => {\n        let tempList = taskList\n        tempList.splice(index, 1)\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\n        setTaskList(tempList)\n        window.location.reload()\n    }\n\n\n    const updateListArray = (obj,index) =>{\n        let tempList = taskList\n        tempList[index] = obj\n        localStorage.setItem(\"taskList\",JSON.stringify(tempList))\n        setTaskList(tempList)\n        window.location.reload()\n    }\n    const toggle =() =>{\n        setModal(!modal);\n    }\n    const saveTask= (taskObj) =>{\n        let tempList = taskList\n        tempList.push(taskObj)\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\n        setTaskList(tempList)\n        setModal(false)\n    }\n    return(\n        <>\n        <div className=\"header text-center\">\n            <h1>ToDo List</h1>\n            <button className=\"btn btn-primary\" onClick={()=> setModal(true)} > Add Task</button>\n        </div>\n        <div className=\"task-container\">\n            {taskList && taskList.map((obj, index) => <ToDo taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/>)}\n\n        </div>\n        <AddTask toggle={toggle} modal={modal} save ={saveTask}/>\n        </>\n    );\n};\n\nexport default ToDoList;","import './App.css';\nimport React from 'react';\nimport TodoList from './component/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css' ;\nimport 'font-awesome/css/font-awesome.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}